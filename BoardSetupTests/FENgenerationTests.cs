using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection.Metadata.Ecma335;

using BoardSetup;

namespace BoardSetupTests
{
    [TestClass]
    public class FENgenerationTests
    {
        // List of all possible FENs
        ArrayList FENarr;

        /// <summary>
        /// Add all FENs to a single ArrayList to iterate over later
        /// </summary>
        [TestInitialize] 
        public void Initialize() 
        {
            FENarr = new ArrayList(960);

            int count = -2;

            using (StreamReader sr = new StreamReader(Directory.GetCurrentDirectory().Replace("bin\\Debug\\net7.0", "960table.txt")))
            {
                string line;

                while ((line = sr.ReadLine()) != null)
                {
                    if (count == -1)
                    {
                        count++; continue;
                    }

                    count++;

                    FENarr.Add(line.Substring(34, 90-34).Replace("w - ", "w KQkq "));

                    Debug.WriteLine(line.Substring(34, 90 - 34).Replace("w - ", "w KQkq "));
                }
            }
        }

        /// <summary>
        /// Test that every FEN gets generated by this algorithm
        /// 
        /// Run the generateFEN() method 7150 times, rounding up from the solution to 
        /// the expected number of times required to generate every number from 1 to 960.
        /// (Calculated from the Coupon Collector's Problem, see project README for more details)
        /// 
        /// </summary>
        [TestMethod]
        public void FENgenerationTest()
        {
            for (int i = 0; i < 7150; i++)
            {
                string fen = BoardSetup.Board.GenerateFEN();

                Debug.WriteLine(FENarr.Contains(fen));
                Debug.WriteLine(fen);
            }
        }
    }
}